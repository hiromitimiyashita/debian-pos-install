#!/bin/bash

# ==============================================================================
# Este script automatiza a instalação e a configuração do GitHub CLI (gh)
# em sistemas Debian, garantindo que as configurações sejam aplicadas
# ao usuário correto e não ao root.
# ==============================================================================

# --- Configuração de Robustez ---
set -e
set -o pipefail
trap 'error_handler $? $LINENO' ERR

# --- Funções Globais de Log e Erro ---
log_step() { echo -e "\n\e[1;35m>>> PASSO: $1\e[0m"; }
log_success() { echo -e "\e[1;32m[SUCESSO] $1\e[0m"; }
log_error() { echo -e "\e[1;31m[ERRO] $1\e[0m" >&2; }
log_info() { echo -e "\e[1;34m[INFO] $1\e[0m"; }
log_warning() { echo -e "\e[1;33m[AVISO] $1\e[0m"; }

error_handler() {
    log_error "Ocorreu um erro na linha $2. Código de saída: $1."
    exit 1
}

# --- Funções de Lógica ---

check_permissions() {
    log_step "Verificando permissões e identificando usuário"
    if [ "$(id -u)" -ne 0 ]; then
        log_error "Este script precisa ser executado com sudo. Ex: sudo ./install_github_cli"
        exit 1
    fi
    TARGET_USER=${SUDO_USER:-$(logname)}
    if [ -z "$TARGET_USER" ]; then
        log_error "Não foi possível determinar o usuário alvo."
        exit 1
    fi
    log_info "Script sendo executado para o usuário: $TARGET_USER"
}

install_gh_package() {
    log_step "Instalando o pacote GitHub CLI (gh)"

    if command -v gh &> /dev/null; then
        log_warning "O GitHub CLI já está instalado. Pulando a instalação."
        gh --version
        return
    fi

    log_info "Instalando dependências necessárias (git, curl, gpg)..."
    apt update
    apt install -y git curl gpg

    log_info "Adicionando a chave GPG e o repositório do GitHub CLI..."
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null

    log_info "Atualizando a lista de pacotes e instalando o gh..."
    apt update
    apt install -y gh

    log_success "GitHub CLI instalado com sucesso."
    gh --version
}

configure_git() {
    log_step "Configurando a identidade global do Git"
    log_info "Esta informação será usada em seus commits."
    read -p "Digite seu nome completo para o Git: " git_name
    read -p "Digite seu e-mail para o Git (o mesmo da sua conta GitHub ou o email Público): " git_email

    # Executa como o usuário alvo para configurar o ~/.gitconfig correto
    sudo -u "$TARGET_USER" git config --global user.name "$git_name"
    sudo -u "$TARGET_USER" git config --global user.email "$git_email"

    log_success "Identidade do Git configurada para o usuário $TARGET_USER."
}

authenticate_gh() {
    log_step "Autenticando o GitHub CLI com sua conta"
    log_info "O comando 'gh auth login' será executado."
    log_info "Uma janela do navegador pode ser aberta para autorização."
    read -p "Pressione Enter para iniciar a autenticação..."

    # Executa a autenticação como o usuário alvo
    sudo -u "$TARGET_USER" gh auth login

    log_info "Verificando status da autenticação..."
    sudo -u "$TARGET_USER" gh auth status
    log_success "Autenticação concluída."
}

apply_customizations() {
    log_step "Aplicando customizações opcionais"

    # Protocolo Git
    read -p "Deseja definir SSH como o protocolo padrão para operações Git? (Recomendado) (S/n): " set_ssh
    if [[ "${set_ssh:-s}" =~ ^[Ss]$ ]]; then
        sudo -u "$TARGET_USER" gh config set git_protocol ssh
        log_success "Protocolo Git definido como SSH."
    else
        log_info "O protocolo Git permanecerá como HTTPS (padrão)."
    fi

    # Editor de Texto
    log_info "Você pode definir um editor padrão para o Git e o gh."
    read -p "Opções: (n)ano, (v)im, (c)ode (VS Code), (k)ate, ou (s)altar? [padrão: s]: " editor_choice
    case "$editor_choice" in
        [Nn]) editor_cmd="nano" ;;
        [Vv]) editor_cmd="vim" ;;
        [Cc]) editor_cmd="code --wait" ;;
        [Kk]) editor_cmd="kate -b" ;;
        *) editor_cmd="" ;;
    esac

    if [ -n "$editor_cmd" ]; then
        sudo -u "$TARGET_USER" git config --global core.editor "$editor_cmd"
        sudo -u "$TARGET_USER" gh config set editor "$editor_cmd"
        log_success "Editor padrão definido como '$editor_cmd'."
    else
        log_info "Nenhum editor padrão foi definido."
    fi

    # Aliases
    read -p "Deseja adicionar alguns aliases úteis para 'gh'? (S/n): " add_aliases
    if [[ "${add_aliases:-s}" =~ ^[Ss]$ ]]; then
        log_info "Adicionando aliases..."
        sudo -u "$TARGET_USER" gh alias set co 'pr checkout'
        sudo -u "$TARGET_USER" gh alias set ci 'pr checks'
        sudo -u "$TARGET_USER" gh alias set prd 'pr create --draft'
        sudo -u "$TARGET_USER" gh alias set 'pr-view' 'pr view --web'
        sudo -u "$TARGET_USER" gh alias set 'repo-view' 'repo view --web'
        log_success "Aliases adicionados! Use 'gh alias list' para vê-los."
    else
        log_info "Nenhum alias foi adicionado."
    fi
}

# --- Função Principal ---
main() {
    clear
    check_permissions

    install_gh_package
    configure_git
    authenticate_gh
    apply_customizations

    log_step "Instalação e Configuração Concluídas!"
    log_success "O GitHub CLI está pronto para uso pelo usuário $TARGET_USER."
    log_info "Experimente alguns comandos: gh repo list, gh pr status, gh issue list"
}

# --- Ponto de Entrada do Script ---
main
