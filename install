#!/bin/bash
# ==============================================================================
# Script Pós-Instalação Modernizado para Debian
#
# Autor: Equipe de Especialistas (Revisado)
# Versão: 2.0
#
# Este script automatiza a instalação de ferramentas essenciais de sistema,
# desktop, multimídia e desenvolvimento com feedback aprimorado.
#
# USO:
# Execute com privilégios de sudo: sudo ./setup_script.sh
# ==============================================================================

# --- Configuração de Robustez ---
# Sai imediatamente se um comando falhar.
set -e
# Trata erros de forma elegante.
trap 'error_handler $? $LINENO' ERR

# --- Funções de Feedback e Log ---
log_step() {
    echo -e "\n\e[1;35m=======================================================================\e[0m"
    echo -e "\e[1;35m>>> PASSO: $1\e[0m"
    echo -e "\e[1;35m=======================================================================\e[0m"
}

log_success() {
    echo -e "\e[1;32m[SUCESSO] $1\e[0m"
}

log_error() {
    echo -e "\e[1;31m[ERRO] $1\e[0m" >&2
}

log_info() {
   echo -e "\e[1;34m[INFO] $1\e[0m"
}

log_warning() {
    echo -e "\e[1;33m[AVISO] $1\e[0m"
}

# --- Tratamento de Erros ---
error_handler() {
    log_error "Ocorreu um erro na linha $2. Código de saída: $1."
    exit 1
}

# --- Funções de Instalação ---
configure_apt_repositories() {
    log_step "Configurando repositórios APT (contrib, non-free, non-free-firmware)"
    log_info "Fazendo backup do /etc/apt/sources.list..."
    cp /etc/apt/sources.list /etc/apt/sources.list.bak
    log_info "Adicionando componentes 'contrib', 'non-free' e 'non-free-firmware'..."
    sed -i 's/ main$/ main contrib non-free non-free-firmware/' /etc/apt/sources.list
    log_info "Atualizando a lista de pacotes..."
    apt update
    log_success "Repositórios APT configurados."
}

install_sudo_and_configure_user() {
    log_step "Verificando e configurando o sudo"
    if ! command -v sudo &> /dev/null; then
        log_info "Comando 'sudo' não encontrado. Instalando..."
        apt install -y sudo
        log_success "'sudo' foi instalado."
    fi

    # Prefere o usuário que chamou sudo, senão usa o logname
    TARGET_USER=${SUDO_USER:-$(logname)}
    if groups "$TARGET_USER" | grep -q '\bsudo\b'; then
        log_info "Usuário '$TARGET_USER' já pertence ao grupo 'sudo'."
    else
        log_info "Adicionando o usuário '$TARGET_USER' ao grupo 'sudo'..."
        adduser "$TARGET_USER" sudo
        log_warning "O usuário '$TARGET_USER' deve fazer logout e login novamente para que as permissões de sudo entrem em vigor."
    fi
    log_success "Configuração do sudo concluída."
}

install_essential_packages() {
    log_step "Instalando pacotes essenciais e multimídia"
    log_info "Instalando: wget, gpg, curl, build-essential, zip, unzip, vlc, python3-pip..."
    apt install -y \
        wget gpg apt-transport-https curl build-essential \
        zip unzip unrar 7zip \
        vlc lame libdvd-pkg \
        gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
        python3-pip python3-venv

    log_info "Reconfigurando libdvd-pkg de forma não interativa..."
    dpkg-reconfigure -fnoninteractive libdvd-pkg
    log_success "Pacotes essenciais instalados."
}

install_google_chrome() {
    log_step "Instalando o Google Chrome"
    log_info "Baixando a chave de assinatura do Google..."
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
    log_info "Adicionando o repositório do Google Chrome..."
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
    log_info "Atualizando a lista de pacotes e instalando o Chrome..."
    apt update
    apt install -y google-chrome-stable
    log_success "Google Chrome instalado."
}

install_vscode() {
    log_step "Instalando o Visual Studio Code"
    log_info "Baixando a chave de assinatura da Microsoft..."
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/microsoft-archive-keyring.gpg
    log_info "Adicionando o repositório do VS Code..."
    echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
    log_info "Atualizando a lista de pacotes e instalando o VS Code..."
    apt update
    apt install -y code
    log_success "Visual Studio Code instalado."
}

install_nodejs_lts() {
    log_step "Instalando o Node.js (versão LTS) via NodeSource"
    log_info "Baixando e executando o script de configuração do NodeSource..."
    curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
    log_info "Instalando o pacote Node.js..."
    apt-get install -y nodejs
    log_success "Node.js LTS instalado."
}

# --- Função Principal ---
main() {
    if [ "$(id -u)" -ne 0 ]; then
        log_error "Este script precisa ser executado como root ou com privilégios de sudo."
        echo "Exemplo: sudo ./setup_script.sh"
        exit 1
    fi

    configure_apt_repositories
    install_sudo_and_configure_user
    install_essential_packages
    install_google_chrome
    install_vscode
    install_nodejs_lts

    log_step "CONFIGURAÇÃO CONCLUÍDA"
    log_success "O sistema foi configurado com sucesso!"
    log_info "AÇÕES NECESSÁRIAS:"
    log_warning "1. REINICIE o sistema para garantir que todas as alterações, especialmente as permissões do 'sudo', sejam aplicadas corretamente."
    log_info "2. Após reiniciar, verifique as instalações com os comandos:"
    echo "   - google-chrome-stable --version"
    echo "   - code --version"
    echo "   - node -v"
    echo "   - npm -v"
}

# Executa a função principal
main
