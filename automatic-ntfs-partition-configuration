#!/bin/bash

# ==============================================================================
# Script Melhorado para Configurar a Montagem Automática de Partição NTFS
# Versão: 2.0
#
# Este script automatiza a configuração de uma partição NTFS no /etc/fstab
# com uma interface interativa e tratamento de erros robusto.
# ==============================================================================

# --- Configuração de Robustez ---
set -e
set -o pipefail
trap 'error_handler $? $LINENO' ERR

# --- Funções Globais de Log e Erro ---
log_step() { echo -e "\n\e[1;35m>>> PASSO: $1\e[0m"; }
log_success() { echo -e "\e[1;32m[SUCESSO] $1\e[0m"; }
log_error() { echo -e "\e[1;31m[ERRO] $1\e[0m" >&2; }
log_info() { echo -e "\e[1;34m[INFO] $1\e[0m"; }
log_warning() { echo -e "\e[1;33m[AVISO] $1\e[0m"; }

error_handler() {
    log_error "Ocorreu um erro na linha $2. Código de saída: $1."
    exit 1
}

# --- Funções de Lógica ---

check_permissions_and_user() {
    log_step "Verificando permissões e identificando usuário"
    if [ "$(id -u)" -ne 0 ]; then
        log_error "Este script precisa ser executado com privilégios de root. Use 'sudo $0'"
        exit 1
    fi

    if [ -n "$SUDO_USER" ]; then
        TARGET_USER="$SUDO_USER"
    else
        read -p "Executando como root. Insira o nome de usuário para conceder as permissões: " TARGET_USER
        if ! id "$TARGET_USER" &>/dev/null; then
            log_error "O usuário '$TARGET_USER' não existe."
            exit 1
        fi
    fi

    USER_ID=$(id -u "$TARGET_USER")
    GROUP_ID=$(id -g "$TARGET_USER")
    log_info "Configurando permissões para o usuário: $TARGET_USER (UID: $USER_ID, GID: $GROUP_ID)"
}

install_dependencies() {
    log_step "Verificando e instalando dependências"
    if ! dpkg -s ntfs-3g &>/dev/null; then
        log_info "O pacote ntfs-3g não foi encontrado. Instalando..."
        apt update
        apt install -y ntfs-3g
    else
        log_info "O pacote ntfs-3g já está instalado."
    fi
    log_success "Dependências verificadas."
}

select_partition() {
    log_step "Seleção da Partição NTFS"
    log_info "Procurando por partições NTFS disponíveis..."
    
    # Cria um array com as partições encontradas
    mapfile -t partitions < <(lsblk -f -o NAME,FSTYPE,LABEL,SIZE | grep -i 'ntfs' | sed 's/└─//; s/├─//')
    
    if [ ${#partitions[@]} -eq 0 ]; then
        log_error "Nenhuma partição NTFS foi encontrada. Abortando."
        exit 1
    fi

    local PS3="Digite o número da partição que deseja configurar: "
    select choice in "${partitions[@]}" "Sair"; do
        if [[ "$choice" == "Sair" ]]; then
            log_info "Operação cancelada pelo usuário."
            exit 0
        elif [ -n "$choice" ]; then
            PARTITION_DEVICE="/dev/$(echo "$choice" | awk '{print $1}')"
            log_info "Você selecionou: $choice"
            log_info "Dispositivo: $PARTITION_DEVICE"
            break
        else
            log_warning "Opção inválida. Tente novamente."
        fi
    done

    PARTITION_UUID=$(blkid -s UUID -o value "$PARTITION_DEVICE")
    if [ -z "$PARTITION_UUID" ]; then
        log_error "Não foi possível obter o UUID para '$PARTITION_DEVICE'."
        exit 1
    fi
    log_success "UUID da partição: $PARTITION_UUID"
}

get_mount_point() {
    log_step "Configurando o Ponto de Montagem"
    local PARTITION_LABEL=$(lsblk -no LABEL "$PARTITION_DEVICE")
    local DEFAULT_MOUNT_POINT="/mnt/${PARTITION_LABEL:-data-$(basename "$PARTITION_DEVICE")}"
    
    read -p "Insira o ponto de montagem (pressione Enter para usar '$DEFAULT_MOUNT_POINT'): " MOUNT_POINT
    MOUNT_POINT=${MOUNT_POINT:-$DEFAULT_MOUNT_POINT}

    if [ ! -d "$MOUNT_POINT" ]; then
        log_info "O diretório '$MOUNT_POINT' não existe. Criando..."
        mkdir -p "$MOUNT_POINT"
    fi
    
    log_info "Definindo a propriedade de '$MOUNT_POINT' para o usuário '$TARGET_USER'..."
    chown "$TARGET_USER":"$TARGET_USER" "$MOUNT_POINT"
    log_success "Ponto de montagem definido: $MOUNT_POINT"
}

configure_fstab() {
    log_step "Modificando o arquivo /etc/fstab"
    local FSTAB_FILE="/etc/fstab"
    local FSTAB_BACKUP="/etc/fstab.bak.$(date +%Y-%m-%d_%H-%M-%S)"

    log_info "Criando cópia de segurança de $FSTAB_FILE em $FSTAB_BACKUP..."
    cp "$FSTAB_FILE" "$FSTAB_BACKUP"

    # umask=007 -> rwx para dono e grupo, sem permissão para outros
    local MOUNT_OPTIONS="defaults,uid=$USER_ID,gid=$GROUP_ID,umask=007,nofail,windows_names"
    local FSTAB_ENTRY="UUID=$PARTITION_UUID   $MOUNT_POINT   ntfs-3g   $MOUNT_OPTIONS   0   0"

    # Evita adicionar entradas duplicadas
    if grep -q "UUID=$PARTITION_UUID" "$FSTAB_FILE"; then
        log_warning "Uma entrada para esta partição (UUID: $PARTITION_UUID) já existe no fstab. Nenhuma alteração foi feita."
        FSTAB_MODIFIED=false
    else
        log_info "Adicionando a seguinte linha ao $FSTAB_FILE:"
        echo "$FSTAB_ENTRY"
        echo "" >> "$FSTAB_FILE"
        echo "# Montagem automática da partição NTFS ($PARTITION_DEVICE) configurada por script" >> "$FSTAB_FILE"
        echo "$FSTAB_ENTRY" >> "$FSTAB_FILE"
        FSTAB_MODIFIED=true
        log_success "Arquivo $FSTAB_FILE atualizado."
    fi
}

mount_and_verify() {
    if ! "$FSTAB_MODIFIED"; then
        log_info "Nenhuma alteração foi feita no fstab, pulando a montagem."
        return
    fi

    log_step "Validando e Montando a Partição"
    log_info "Recarregando as configurações do systemd e tentando montar a partição..."
    systemctl daemon-reload
    mount -a
    
    log_success "Partição montada com sucesso em '$MOUNT_POINT'."
    log_info "A configuração está concluída. A partição será montada automaticamente no próximo boot."
}


# --- Função Principal ---
main() {
    clear
    check_permissions_and_user
    install_dependencies
    select_partition
    get_mount_point
    configure_fstab
    mount_and_verify
    
    log_step "PROCESSO FINALIZADO"
}

# --- Ponto de Entrada do Script ---
main
